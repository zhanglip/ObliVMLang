package com.oblivm.backend.generated.knn2;


secure int1 lessThan(secure int  lhs, secure int rhs) {
    secure int1 res = 0;
    if(lhs$0~32$ < rhs$0~32$) {
        res = 1;
    }
    return res;
}


//int main@l@r(int[l] lhs, int[r] rhs) {   
int main@m@n(int[m] a, int[n] b) {     
	int k = 8;
	secure int aPtr = 0;
    secure int bPtr = 0;
    int mPtr = 0;
	int bound = m+n;
    secure int[secure m+n] merged; 
	bfor(m+n)(int mPtr = 0; mPtr < k; mPtr = mPtr + 1) {
		if(bPtr < n && (aPtr == m || lessThan(b[bPtr], a[aPtr]) == 1)) {
	    	merged[mPtr] = b[bPtr];
	    	bPtr = bPtr + 1;    
	 	}
	 	else {
	      merged[mPtr] = a[aPtr];
 	      aPtr = aPtr + 1;
		}
	}
	return k;
}